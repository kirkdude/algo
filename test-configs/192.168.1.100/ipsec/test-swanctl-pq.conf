# swanctl.conf for strongSwan 6.0+ post-quantum VPN
# Generated by Algo VPN quantum-safe role

connections {
    # Primary post-quantum connection
    algo-pq {
        version = 2

        # Post-quantum proposals
        proposals = aes256gcm16-prfsha512-ecp384-ke1_mlkem768!
        esp_proposals = aes256gcm16-sha256!

        # Connection parameters
        reauth_time = 12h
        life_time = 3h
        rand_time = 1h
        over_time = 10m

        # Fragmentation and compression
        fragmentation = yes
        compress = yes

        # DPD configuration
        dpd_action = clear
        dpd_delay = 35s

        # Local gateway configuration
        local_addrs = %any
        local {
            auth = pubkey
            certs = 192.168.1.100.crt
            id = 192.168.1.100
        }

        # Remote client configuration
        remote {
            auth = pubkey
        }

        # Child SA configuration
        children {
            algo-pq-tunnel {
                local_ts = 0.0.0.0/0
                remote_ts = 10.48.0.0/16
                esp_proposals = aes256gcm16-sha256!
                life_time = 3h
                rand_time = 30m
                dpd_action = clear

                # Enhanced settings for post-quantum
                mode = tunnel
                start_action = none
                close_action = none
            }
        }

        # Post-quantum specific settings
        mobike = no  # Disabled for PQ stability
        unique = never
    }

    # Fallback connection for classical clients
    algo-classical-fallback {
        version = 2
        proposals = aes256gcm16-prfsha512-ecp384!
        esp_proposals = aes256gcm16-ecp384!

        reauth_time = 12h
        life_time = 3h
        fragmentation = yes
        compress = yes
        dpd_action = clear
        dpd_delay = 35s

        local_addrs = %any
        local {
            auth = pubkey
            certs = 192.168.1.100.crt
            id = 192.168.1.100
        }

        remote {
            auth = pubkey
        }

        children {
            algo-classical-tunnel {
                local_ts = 0.0.0.0/0
                remote_ts = 10.48.0.0/16
                esp_proposals = aes256gcm16-ecp384!
                life_time = 3h
                mode = tunnel
                start_action = none
                close_action = none
            }
        }

        unique = never
    }
}

# Pool configuration for IP assignment
pools {
    algo-pool-ipv4 {
        addrs = 10.48.0.0/16
        dns = 172.16.0.1
    }

}

# Certificate authorities
authorities {
    algo-ca {
        cacert = cacert.pem
        auto = add
    }
}

# Secrets will be loaded from separate files
secrets {
    # Private keys loaded automatically from /etc/swanctl/private/
    # CA certificate loaded from /etc/swanctl/x509ca/
}
