---
# strongSwan quantum-safe build tasks

- name: Create strongSwan build directory
  file:
    path: "{{ strongswan_build_dir }}"
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Clean up old strongSwan installations
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ strongswan_install_dir }}/strongswan-{{ strongswan_version }}"
    - "{{ strongswan_build_dir }}/strongswan-{{ strongswan_version }}.tar.gz"

- name: Check if strongSwan OQS source already exists
  stat:
    path: "{{ strongswan_install_dir }}/strongswan-oqs"
  register: strongswan_source_check

- name: Download official strongSwan source tarball
  get_url:
    url: "https://download.strongswan.org/strongswan-{{ strongswan_version }}.tar.gz"
    dest: "{{ strongswan_build_dir }}/strongswan-{{ strongswan_version }}.tar.gz"
    mode: 0644
    timeout: 300
  when: not strongswan_source_check.stat.exists

- name: Extract strongSwan source
  unarchive:
    src: "{{ strongswan_build_dir }}/strongswan-{{ strongswan_version }}.tar.gz"
    dest: "{{ strongswan_install_dir }}"
    remote_src: true
    owner: root
    group: root
  when: not strongswan_source_check.stat.exists

- name: Rename extracted directory for consistency
  command: mv "{{ strongswan_install_dir }}/strongswan-{{ strongswan_version }}" "{{ strongswan_install_dir }}/strongswan-oqs"
  when: not strongswan_source_check.stat.exists

- name: Check if strongSwan is already built with quantum-safe support
  command: "{{ strongswan_install_dir }}/sbin/ipsec version"
  register: strongswan_version_check
  failed_when: false
  changed_when: false

- name: Force rebuild if requested
  set_fact:
    force_strongswan_rebuild: "{{ force_rebuild | default(false) }}"

- name: Configure strongSwan with quantum-safe support
  command: >
    ./configure
    --prefix={{ strongswan_install_dir }}
    --sysconfdir=/etc
    --enable-swanctl
    --enable-systemd
    --enable-openssl
    --enable-oqs
    --enable-eap-identity
    --enable-eap-md5
    --enable-eap-tls
    --enable-eap-ttls
    --enable-eap-peap
    --enable-eap-mschapv2
    --enable-xauth-eap
    --disable-gmp
    --disable-des
    --disable-rc2
    --disable-md4
    LIBS="-loqs"
    CFLAGS="-I/usr/local/include"
    LDFLAGS="-L/usr/local/lib"
  args:
    chdir: "{{ strongswan_install_dir }}/strongswan-oqs"
  when: >
    force_strongswan_rebuild or
    strongswan_version_check.rc != 0 or
    "LibOQS" not in (strongswan_version_check.stdout | default("")) or
    "oqs" not in (strongswan_version_check.stdout | default(""))
  register: strongswan_configure
  failed_when: strongswan_configure.rc != 0

- name: Display configure output on failure
  debug:
    msg: "Configure failed: {{ strongswan_configure.stderr }}"
  when: >
    strongswan_configure is defined and
    strongswan_configure is not skipped and
    strongswan_configure.rc is defined and
    strongswan_configure.rc != 0

- name: Build strongSwan with quantum-safe support
  command: make -j{{ liboqs_build_parallel_jobs }}
  args:
    chdir: "{{ strongswan_install_dir }}/strongswan-oqs"
  when: >
    (force_strongswan_rebuild or
    strongswan_version_check.rc != 0 or
    "LibOQS" not in (strongswan_version_check.stdout | default("")) or
    "oqs" not in (strongswan_version_check.stdout | default(""))) and
    strongswan_configure is succeeded
  register: strongswan_build
  failed_when: strongswan_build.rc != 0

- name: Display build output on failure
  debug:
    msg: "Build failed: {{ strongswan_build.stderr }}"
  when: >
    strongswan_build is defined and
    strongswan_build is not skipped and
    strongswan_build.rc is defined and
    strongswan_build.rc != 0

# Install strongSwan with quantum-safe support - broken into focused tasks for maintainability

- name: Run make install for strongSwan
  make:
    chdir: "{{ strongswan_install_dir }}/strongswan-oqs"
    target: install
  when: >
    (force_strongswan_rebuild or
    strongswan_version_check.rc != 0 or
    "LibOQS" not in (strongswan_version_check.stdout | default("")) or
    "oqs" not in (strongswan_version_check.stdout | default(""))) and
    strongswan_build is succeeded
  register: strongswan_make_install

- name: Check if ipsec binary was installed correctly
  stat:
    path: "{{ strongswan_install_dir }}/sbin/ipsec"
  register: ipsec_binary_check
  when: strongswan_make_install is not skipped

- name: Handle missing ipsec binary - copy from source if available
  block:
    - name: Check for ipsec binary in source directory
      stat:
        path: "{{ strongswan_install_dir }}/strongswan-oqs/src/ipsec"
      register: ipsec_source_check

    - name: Create sbin directory
      file:
        path: "{{ strongswan_install_dir }}/sbin"
        state: directory
        mode: '0755'

    - name: Check for each binary in source directory
      stat:
        path: "{{ strongswan_install_dir }}/strongswan-oqs/src/{{ item }}"
      loop:
        - ipsec
        - swanctl
      register: source_binaries_check
      when: ipsec_source_check.stat.exists

    - name: Copy binaries from source (files only)
      copy:
        src: "{{ item.stat.path }}"
        dest: "{{ strongswan_install_dir }}/sbin/{{ item.item }}"
        mode: '0755'
        remote_src: yes
      loop: "{{ source_binaries_check.results | default([]) }}"
      when:
        - ipsec_source_check.stat.exists
        - item.stat.exists
        - item.stat.isreg  # Only copy regular files, not directories
      loop_control:
        label: "{{ item.item }}"

  when: >
    strongswan_make_install is not skipped and
    not ipsec_binary_check.stat.exists

- name: Create ipsec wrapper script for swanctl-only installations
  block:
    - name: Check for swanctl and charon binaries
      stat:
        path: "{{ item }}"
      register: strongswan_components
      loop:
        - "{{ strongswan_install_dir }}/sbin/swanctl"
        - "{{ strongswan_install_dir }}/libexec/ipsec/charon"

    - name: Create ipsec wrapper script
      template:
        src: ipsec-wrapper.sh.j2
        dest: "{{ strongswan_install_dir }}/sbin/ipsec"
        mode: '0755'
      when: >
        strongswan_components.results[0].stat.exists and
        strongswan_components.results[1].stat.exists

  when: >
    strongswan_make_install is not skipped and
    not ipsec_binary_check.stat.exists

- name: Verify ipsec binary exists after all installation attempts
  stat:
    path: "{{ strongswan_install_dir }}/sbin/ipsec"
  register: final_ipsec_check
  when: strongswan_make_install is not skipped

- name: Fail if ipsec binary still missing
  fail:
    msg: "strongSwan installation failed - ipsec binary not found at {{ strongswan_install_dir }}/sbin/ipsec"
  when: >
    strongswan_make_install is not skipped and
    not final_ipsec_check.stat.exists

- name: Create system-wide symlinks for strongSwan binaries
  file:
    src: "{{ strongswan_install_dir }}/sbin/{{ item }}"
    dest: "/usr/local/sbin/{{ item }}"
    state: link
    force: yes
  loop:
    - ipsec
    - swanctl
  when: >
    strongswan_make_install is not skipped and
    final_ipsec_check.stat.exists
  ignore_errors: yes  # swanctl symlink might fail if binary doesn't exist
  notify: restart strongswan

- name: Display install output on failure
  debug:
    msg: "Install failed: {{ strongswan_install.stderr }}"
  when: >
    strongswan_install is defined and
    strongswan_install is not skipped and
    strongswan_install.rc is defined and
    strongswan_install.rc != 0

- name: Verify strongSwan installation
  stat:
    path: "{{ strongswan_install_dir }}/sbin/ipsec"
  register: ipsec_binary_check

- name: Display installation verification
  debug:
    msg: "strongSwan binary exists: {{ ipsec_binary_check.stat.exists }}"

- name: Create strongSwan systemd service override directory
  file:
    path: /etc/systemd/system/strongswan.service.d
    state: directory
    mode: 0755
    owner: root
    group: root

- name: Configure strongSwan systemd service override
  copy:
    dest: /etc/systemd/system/strongswan.service.d/quantum-safe.conf
    content: |
      [Service]
      Environment="PATH={{ strongswan_install_dir }}/sbin:/usr/sbin:/sbin:$PATH"
      Environment="LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH"
      ExecStart=
      ExecStart={{ strongswan_install_dir }}/sbin/ipsec start --nofork
    mode: 0644
    owner: root
    group: root
  notify:
    - daemon-reload
    - restart strongswan

- name: Configure strongSwan plugins for quantum-safe support
  template:
    src: strongswan-pq.conf.j2
    dest: /etc/strongswan.d/charon/quantum-safe.conf
    mode: 0644
    owner: root
    group: root
  notify: restart strongswan

- name: Create quantum-safe algorithm validation script
  template:
    src: validate-pq-algorithms.sh.j2
    dest: "{{ strongswan_install_dir }}/bin/validate-pq-algorithms.sh"
    mode: 0755
    owner: root
    group: root

- name: Validate quantum-safe algorithms are available
  command: "{{ strongswan_install_dir }}/bin/validate-pq-algorithms.sh"
  register: pq_validation
  changed_when: false
  failed_when: false

- name: Display available quantum-safe algorithms
  debug:
    msg: "{{ pq_validation.stdout_lines }}"
