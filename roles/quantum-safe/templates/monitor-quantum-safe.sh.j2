#!/bin/bash
# Quantum-Safe Cryptography System Monitor
# Generated by Algo VPN quantum-safe role
# Timestamp: {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
MONITOR_LOG="/opt/quantum-safe/logs/monitoring.log"
METRICS_DIR="/opt/quantum-safe/metrics"
STRONGSWAN_BIN="{{ strongswan_install_dir }}/sbin"
LIBOQS_LIB="/usr/local/lib/liboqs.so"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Create metrics directory
mkdir -p "$METRICS_DIR"

# Function to log with timestamp
log_metric() {
    echo "[$TIMESTAMP] $1" >> "$MONITOR_LOG"
}

# Function to check service status
check_service() {
    local service="$1"
    local status

    if systemctl is-active "$service" >/dev/null 2>&1; then
        status="ACTIVE"
    else
        status="INACTIVE"
    fi

    log_metric "SERVICE_STATUS,$service,$status"
    echo "service.${service}.status,status=${status,,} 1"
}

# Function to collect system metrics
collect_system_metrics() {
    # CPU usage
    local cpu_usage
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}')
    log_metric "CPU_USAGE,$cpu_usage"
    echo "system.cpu.usage value=${cpu_usage}"

    # Memory usage
    local mem_info
    mem_info=$(free | grep Mem)
    local mem_total mem_used mem_usage
    mem_total=$(echo "$mem_info" | awk '{print $2}')
    mem_used=$(echo "$mem_info" | awk '{print $3}')
    mem_usage=$(awk "BEGIN {printf \"%.2f\", $mem_used/$mem_total*100}")
    log_metric "MEMORY_USAGE,$mem_usage"
    echo "system.memory.usage value=${mem_usage}"

    # Disk usage for quantum-safe directory
    local disk_usage
    disk_usage=$(df /opt/quantum-safe | tail -1 | awk '{print $5}' | sed 's/%//')
    log_metric "DISK_USAGE,$disk_usage"
    echo "system.disk.quantum_safe.usage value=${disk_usage}"
}

# Function to check LibOQS status
check_liboqs() {
    local status="OK"
    local details=""

    # Check library file
    if [ ! -f "$LIBOQS_LIB" ]; then
        status="ERROR"
        details="Library file missing"
    else
        # Test library loading
        if ! python3 -c "import ctypes; ctypes.CDLL('$LIBOQS_LIB')" 2>/dev/null; then
            status="WARNING"
            details="Library load test failed"
        fi
    fi

    log_metric "LIBOQS_STATUS,$status,$details"
    echo "quantum_safe.liboqs.status,status=${status,,} 1"
}

# Function to check strongSwan status
check_strongswan() {
    local status="OK"
    local details=""
    local connection_count=0

    # Check binary exists
    if [ ! -f "$STRONGSWAN_BIN/ipsec" ]; then
        status="ERROR"
        details="Binary missing"
    else
        # Check if daemon is running
        if ! "$STRONGSWAN_BIN/ipsec" status >/dev/null 2>&1; then
            status="WARNING"
            details="Daemon not responding"
        else
            # Count active connections
            connection_count=$("$STRONGSWAN_BIN/ipsec" status | grep -c "ESTABLISHED" || echo "0")
        fi
    fi

    log_metric "STRONGSWAN_STATUS,$status,$details,$connection_count"
    echo "quantum_safe.strongswan.status,status=${status,,} 1"
    echo "quantum_safe.strongswan.connections value=${connection_count}"
}

# Function to check quantum-safe algorithm availability
check_algorithms() {
    local available_count=0
    local total_count={{ quantum_safe_algorithms.ml_kem | length }}

    if [ -f "$STRONGSWAN_BIN/swanctl" ]; then
        # Check ML-KEM algorithms
        local algorithms
        algorithms=$("$STRONGSWAN_BIN/swanctl" --list-algs 2>/dev/null || echo "")

        {% for algorithm in quantum_safe_algorithms.ml_kem %}
        if echo "$algorithms" | grep -qi "{{ algorithm | lower }}"; then
            ((available_count++))
        fi
        {% endfor %}
    fi

    log_metric "ALGORITHM_AVAILABILITY,$available_count,$total_count"
    echo "quantum_safe.algorithms.available value=${available_count}"
    echo "quantum_safe.algorithms.total value=${total_count}"
}

# Function to collect performance metrics
collect_performance_metrics() {
    # Connection establishment time (if connections exist)
    if [ -f "$STRONGSWAN_BIN/ipsec" ] && "$STRONGSWAN_BIN/ipsec" status >/dev/null 2>&1; then
        local connection_time
        connection_time=$("$STRONGSWAN_BIN/ipsec" statusall | grep -o "established [0-9]* seconds ago" | head -1 | grep -o "[0-9]*" || echo "0")
        log_metric "CONNECTION_TIME,$connection_time"
        echo "quantum_safe.performance.connection_time value=${connection_time}"
    fi

    # Log file sizes
    local log_size
    if [ -f "/var/log/strongswan.log" ]; then
        log_size=$(du -k /var/log/strongswan.log | cut -f1)
        log_metric "LOG_SIZE,strongswan,$log_size"
        echo "quantum_safe.logs.strongswan.size value=${log_size}"
    fi

    if [ -f "$MONITOR_LOG" ]; then
        log_size=$(du -k "$MONITOR_LOG" | cut -f1)
        log_metric "LOG_SIZE,monitoring,$log_size"
        echo "quantum_safe.logs.monitoring.size value=${log_size}"
    fi
}

# Function to check certificate status
check_certificates() {
    local cert_count=0
    local expired_count=0

    # Check certificates in IPsec config directory
    if [ -d "{{ ipsec_config_path | default('configs') }}" ]; then
        cert_count=$(find "{{ ipsec_config_path | default('configs') }}" -name "*.pem" -o -name "*.crt" | wc -l)

        # Check for expired certificates
        while IFS= read -r cert_file; do
            if [ -n "$cert_file" ] && openssl x509 -checkend 86400 -noout -in "$cert_file" 2>/dev/null; then
                :  # Certificate is valid
            else
                ((expired_count++))
            fi
        done < <(find "{{ ipsec_config_path | default('configs') }}" -name "*.pem" -o -name "*.crt" 2>/dev/null)
    fi

    log_metric "CERTIFICATES,$cert_count,$expired_count"
    echo "quantum_safe.certificates.total value=${cert_count}"
    echo "quantum_safe.certificates.expired value=${expired_count}"
}

# Main monitoring function
main() {
    # Start monitoring
    log_metric "MONITORING_START"

    # Collect all metrics
    {
        echo "# Quantum-Safe Monitoring Metrics - $TIMESTAMP"
        collect_system_metrics
        check_service "strongswan"
        check_service "systemd-resolved"
        check_liboqs
        check_strongswan
        check_algorithms
        collect_performance_metrics
        check_certificates
        echo ""
    } > "$METRICS_DIR/metrics-$(date +%Y%m%d_%H%M%S).txt"

    # Cleanup old metrics files (keep last 24 hours worth = 96 files at 15min intervals)
    find "$METRICS_DIR" -name "metrics-*.txt" -type f -mmin +1440 -delete 2>/dev/null || true

    log_metric "MONITORING_COMPLETE"

    # Health check summary
    local issues=0

    # Check for critical issues
    if [ ! -f "$LIBOQS_LIB" ]; then
        echo "CRITICAL: LibOQS library missing" >&2
        ((issues++))
    fi

    if [ ! -f "$STRONGSWAN_BIN/ipsec" ]; then
        echo "CRITICAL: strongSwan binary missing" >&2
        ((issues++))
    fi

    if ! systemctl is-active strongswan >/dev/null 2>&1; then
        echo "WARNING: strongSwan service not active" >&2
        ((issues++))
    fi

    # Return status
    if [ $issues -eq 0 ]; then
        log_metric "HEALTH_CHECK,OK,0"
        exit 0
    else
        log_metric "HEALTH_CHECK,ISSUES,$issues"
        exit 1
    fi
}

# Execute main function
main "$@"
