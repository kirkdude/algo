#!/bin/bash
# Quantum-Safe Log Analysis Script
# Generated by Algo VPN quantum-safe role
# Timestamp: {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
LOG_DIR="/opt/quantum-safe/logs"
STRONGSWAN_LOG="/var/log/strongswan.log"
SYSLOG="/var/log/syslog"
ANALYSIS_OUTPUT="/opt/quantum-safe/logs/analysis-$(date +%Y%m%d_%H%M%S).txt"

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to analyze monitoring logs
analyze_monitoring_logs() {
    echo "=== Monitoring Log Analysis ===" | tee -a "$ANALYSIS_OUTPUT"

    if [ -f "$LOG_DIR/monitoring.log" ]; then
        local total_entries
        local error_entries
        local warning_entries

        total_entries=$(wc -l < "$LOG_DIR/monitoring.log")
        error_entries=$(grep -c "ERROR\|CRITICAL\|FAIL" "$LOG_DIR/monitoring.log" || echo "0")
        warning_entries=$(grep -c "WARNING\|WARN" "$LOG_DIR/monitoring.log" || echo "0")

        echo "Total monitoring entries: $total_entries" | tee -a "$ANALYSIS_OUTPUT"
        echo "Error entries: $error_entries" | tee -a "$ANALYSIS_OUTPUT"
        echo "Warning entries: $warning_entries" | tee -a "$ANALYSIS_OUTPUT"
        echo "" | tee -a "$ANALYSIS_OUTPUT"

        if [ "$error_entries" -gt 0 ]; then
            print_color "$RED" "Recent errors found in monitoring log:"
            grep "ERROR\|CRITICAL\|FAIL" "$LOG_DIR/monitoring.log" | tail -10 | tee -a "$ANALYSIS_OUTPUT"
            echo "" | tee -a "$ANALYSIS_OUTPUT"
        fi

        # Service status analysis
        echo "Service status summary:" | tee -a "$ANALYSIS_OUTPUT"
        grep "SERVICE_STATUS" "$LOG_DIR/monitoring.log" | tail -20 | cut -d',' -f2,3 | sort | uniq -c | tee -a "$ANALYSIS_OUTPUT"
        echo "" | tee -a "$ANALYSIS_OUTPUT"

    else
        print_color "$YELLOW" "Monitoring log not found: $LOG_DIR/monitoring.log"
    fi
}

# Function to analyze strongSwan logs
analyze_strongswan_logs() {
    echo "=== strongSwan Log Analysis ===" | tee -a "$ANALYSIS_OUTPUT"

    if [ -f "$STRONGSWAN_LOG" ]; then
        # Connection statistics
        local established_count
        local failed_count
        local pq_connections

        established_count=$(grep -c "connection established" "$STRONGSWAN_LOG" || echo "0")
        failed_count=$(grep -c "connection failed\|authentication failed" "$STRONGSWAN_LOG" || echo "0")
        pq_connections=$(grep -c -i "ml-kem\|mlkem\|kyber\|oqs" "$STRONGSWAN_LOG" || echo "0")

        echo "Connection established: $established_count" | tee -a "$ANALYSIS_OUTPUT"
        echo "Connection failures: $failed_count" | tee -a "$ANALYSIS_OUTPUT"
        echo "Quantum-safe connections: $pq_connections" | tee -a "$ANALYSIS_OUTPUT"
        echo "" | tee -a "$ANALYSIS_OUTPUT"

        # Recent errors
        if grep -q "ERROR\|error\|failed" "$STRONGSWAN_LOG"; then
            print_color "$RED" "Recent strongSwan errors:"
            grep -i "ERROR\|error\|failed" "$STRONGSWAN_LOG" | tail -10 | tee -a "$ANALYSIS_OUTPUT"
            echo "" | tee -a "$ANALYSIS_OUTPUT"
        fi

        # Algorithm usage
        echo "Algorithm usage analysis:" | tee -a "$ANALYSIS_OUTPUT"
        grep -i -E "proposal|algorithm|cipher" "$STRONGSWAN_LOG" | tail -10 | tee -a "$ANALYSIS_OUTPUT"
        echo "" | tee -a "$ANALYSIS_OUTPUT"

    else
        print_color "$YELLOW" "strongSwan log not found: $STRONGSWAN_LOG"
    fi
}

# Function to analyze system logs for quantum-safe related entries
analyze_system_logs() {
    echo "=== System Log Analysis ===" | tee -a "$ANALYSIS_OUTPUT"

    if [ -f "$SYSLOG" ]; then
        # Look for strongSwan, IPsec, and quantum-safe related entries
        local ipsec_entries
        local strongswan_entries
        local pq_entries

        ipsec_entries=$(grep -c "ipsec\|IPSec" "$SYSLOG" || echo "0")
        strongswan_entries=$(grep -c "strongswan\|charon" "$SYSLOG" || echo "0")
        pq_entries=$(grep -c -i "quantum\|oqs\|ml-kem\|kyber" "$SYSLOG" || echo "0")

        echo "IPsec related entries: $ipsec_entries" | tee -a "$ANALYSIS_OUTPUT"
        echo "strongSwan related entries: $strongswan_entries" | tee -a "$ANALYSIS_OUTPUT"
        echo "Quantum-safe related entries: $pq_entries" | tee -a "$ANALYSIS_OUTPUT"
        echo "" | tee -a "$ANALYSIS_OUTPUT"

        # Recent quantum-safe related entries
        if [ "$pq_entries" -gt 0 ]; then
            print_color "$GREEN" "Recent quantum-safe system log entries:"
            grep -i "quantum\|oqs\|ml-kem\|kyber" "$SYSLOG" | tail -5 | tee -a "$ANALYSIS_OUTPUT"
            echo "" | tee -a "$ANALYSIS_OUTPUT"
        fi

    else
        print_color "$YELLOW" "System log not found: $SYSLOG"
    fi
}

# Function to analyze performance metrics
analyze_performance_metrics() {
    echo "=== Performance Metrics Analysis ===" | tee -a "$ANALYSIS_OUTPUT"

    local metrics_dir="/opt/quantum-safe/metrics"

    if [ -d "$metrics_dir" ] && [ "$(ls -A $metrics_dir)" ]; then
        local metric_files
        metric_files=$(find "$metrics_dir" -name "*.txt" -o -name "*.json" | wc -l)
        echo "Performance metric files: $metric_files" | tee -a "$ANALYSIS_OUTPUT"

        # Analyze latest metrics file
        local latest_metrics
        latest_metrics=$(find "$metrics_dir" -name "metrics-*.txt" -type f | sort | tail -1)

        if [ -n "$latest_metrics" ] && [ -f "$latest_metrics" ]; then
            echo "Latest metrics from: $(basename "$latest_metrics")" | tee -a "$ANALYSIS_OUTPUT"

            # Extract key metrics
            if grep -q "system.cpu.usage" "$latest_metrics"; then
                local cpu_usage
                cpu_usage=$(grep "system.cpu.usage" "$latest_metrics" | tail -1 | awk '{print $NF}')
                echo "Last CPU usage: ${cpu_usage}%" | tee -a "$ANALYSIS_OUTPUT"
            fi

            if grep -q "system.memory.usage" "$latest_metrics"; then
                local mem_usage
                mem_usage=$(grep "system.memory.usage" "$latest_metrics" | tail -1 | awk '{print $NF}')
                echo "Last memory usage: ${mem_usage}%" | tee -a "$ANALYSIS_OUTPUT"
            fi

            if grep -q "quantum_safe.strongswan.connections" "$latest_metrics"; then
                local connections
                connections=$(grep "quantum_safe.strongswan.connections" "$latest_metrics" | tail -1 | awk '{print $NF}')
                echo "Active connections: $connections" | tee -a "$ANALYSIS_OUTPUT"
            fi
        fi

        echo "" | tee -a "$ANALYSIS_OUTPUT"
    else
        print_color "$YELLOW" "No performance metrics found in $metrics_dir"
    fi
}

# Function to generate recommendations
generate_recommendations() {
    echo "=== Recommendations ===" | tee -a "$ANALYSIS_OUTPUT"

    local recommendations=0

    # Check log file sizes
    for log_file in "$LOG_DIR"/*.log; do
        if [ -f "$log_file" ]; then
            local size
            size=$(du -m "$log_file" | cut -f1)
            if [ "$size" -gt 50 ]; then
                echo "⚠ Large log file detected: $(basename "$log_file") (${size}MB)" | tee -a "$ANALYSIS_OUTPUT"
                echo "  Recommendation: Consider log rotation" | tee -a "$ANALYSIS_OUTPUT"
                ((recommendations++))
            fi
        fi
    done

    # Check for frequent errors
    if [ -f "$LOG_DIR/monitoring.log" ]; then
        local recent_errors
        recent_errors=$(grep -c "ERROR\|CRITICAL" "$LOG_DIR/monitoring.log" | tail -100 || echo "0")
        if [ "$recent_errors" -gt 10 ]; then
            echo "⚠ High error rate detected in monitoring log" | tee -a "$ANALYSIS_OUTPUT"
            echo "  Recommendation: Investigate recent error patterns" | tee -a "$ANALYSIS_OUTPUT"
            ((recommendations++))
        fi
    fi

    # Check service status
    if ! systemctl is-active strongswan >/dev/null 2>&1; then
        echo "⚠ strongSwan service is not active" | tee -a "$ANALYSIS_OUTPUT"
        echo "  Recommendation: Check service status and logs" | tee -a "$ANALYSIS_OUTPUT"
        ((recommendations++))
    fi

    # Check LibOQS library
    if [ ! -f "/usr/local/lib/liboqs.so" ]; then
        echo "⚠ LibOQS library not found" | tee -a "$ANALYSIS_OUTPUT"
        echo "  Recommendation: Verify LibOQS installation" | tee -a "$ANALYSIS_OUTPUT"
        ((recommendations++))
    fi

    if [ "$recommendations" -eq 0 ]; then
        print_color "$GREEN" "No immediate issues detected"
        echo "✓ No immediate issues detected" | tee -a "$ANALYSIS_OUTPUT"
    else
        print_color "$YELLOW" "Found $recommendations recommendations"
    fi

    echo "" | tee -a "$ANALYSIS_OUTPUT"
}

# Main analysis function
main() {
    print_color "$BLUE" "=== Quantum-Safe Log Analysis ==="
    print_color "$BLUE" "Analysis started at: $(date)"
    print_color "$BLUE" "Output file: $ANALYSIS_OUTPUT"
    echo ""

    {
        echo "Quantum-Safe Log Analysis Report"
        echo "Generated: $(date)"
        echo "Host: $(hostname)"
        echo "Analyzer version: 1.0"
        echo "========================================"
        echo ""
    } > "$ANALYSIS_OUTPUT"

    # Run all analysis functions
    analyze_monitoring_logs
    analyze_strongswan_logs
    analyze_system_logs
    analyze_performance_metrics
    generate_recommendations

    # Summary
    echo "=== Analysis Complete ===" | tee -a "$ANALYSIS_OUTPUT"
    echo "Report saved to: $ANALYSIS_OUTPUT" | tee -a "$ANALYSIS_OUTPUT"
    echo "Analysis completed at: $(date)" | tee -a "$ANALYSIS_OUTPUT"

    print_color "$GREEN" "Log analysis completed successfully"
    print_color "$BLUE" "Full report available at: $ANALYSIS_OUTPUT"
}

# Execute main function
main "$@"
