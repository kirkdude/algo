#!/bin/bash
# Comprehensive test runner for quantum-safe development
# Generated by Ansible for Algo Quantum VPN Phase 1

set -e

TEST_DIR="/opt/quantum-safe/tests"
LOG_DIR="/opt/quantum-safe/logs"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
SUMMARY_LOG="$LOG_DIR/test-summary-$TIMESTAMP.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to log with timestamp
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1" | tee -a "$SUMMARY_LOG"
}

success() {
    echo -e "${GREEN}[PASS]${NC} $1" | tee -a "$SUMMARY_LOG"
}

error() {
    echo -e "${RED}[FAIL]${NC} $1" | tee -a "$SUMMARY_LOG"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1" | tee -a "$SUMMARY_LOG"
}

# Create log directory if it doesn't exist
mkdir -p "$LOG_DIR"

log "======================================"
log "Algo Quantum VPN - Phase 1 Test Suite"
log "======================================"
log "Timestamp: $(date)"
log "Test Directory: $TEST_DIR"
log "Log Directory: $LOG_DIR"
log ""

# Test 1: Environment validation
log "Test 1: Environment Validation"
if [[ -f "/etc/profile.d/quantum-safe.sh" ]]; then
    source /etc/profile.d/quantum-safe.sh
    success "Quantum-safe environment loaded"
else
    error "Quantum-safe environment not found"
    exit 1
fi

# Test 2: liboqs installation check
log "Test 2: liboqs Installation Check"
if [[ -f "{{ liboqs_build_dir }}/lib/liboqs.so" ]]; then
    success "liboqs shared library found"
else
    error "liboqs shared library not found"
    exit 1
fi

# Test 3: Run liboqs algorithm tests
log "Test 3: liboqs Algorithm Tests"
if [[ -x "$TEST_DIR/test-liboqs-algorithms.sh" ]]; then
    if "$TEST_DIR/test-liboqs-algorithms.sh"; then
        success "All liboqs algorithms tested successfully"
    else
        error "liboqs algorithm tests failed"
        exit 1
    fi
else
    error "liboqs test script not found or not executable"
    exit 1
fi

# Test 4: System integration check
log "Test 4: System Integration Check"
ldconfig_check=$(ldconfig -p | grep liboqs | wc -l)
if [[ $ldconfig_check -gt 0 ]]; then
    success "liboqs properly integrated with system linker"
else
    warn "liboqs may not be properly integrated with system linker"
fi

# Test 5: Development tools check
log "Test 5: Development Tools Check"
tools=("cmake" "ninja" "gcc" "python3")
for tool in "${tools[@]}"; do
    if command -v "$tool" &> /dev/null; then
        success "$tool is available"
    else
        error "$tool is not available"
        exit 1
    fi
done

# Test 6: Python cryptography libraries
log "Test 6: Python Cryptography Libraries"
python3 -c "import cryptography; print(f'cryptography version: {cryptography.__version__}')" 2>&1 | tee -a "$SUMMARY_LOG"
if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
    success "Python cryptography library is available"
else
    error "Python cryptography library is not available"
    exit 1
fi

{% if quantum_safe_benchmarks %}
# Test 7: Performance benchmarks (if enabled)
log "Test 7: Performance Benchmarks"
if [[ -x "$TEST_DIR/benchmark-quantum-safe.sh" ]]; then
    if timeout 300 "$TEST_DIR/benchmark-quantum-safe.sh"; then
        success "Performance benchmarks completed"
    else
        warn "Performance benchmarks timed out or failed"
    fi
else
    warn "Performance benchmark script not found"
fi
{% endif %}

# Test 8: Configuration validation
log "Test 8: Configuration Validation"
config_file="/opt/quantum-safe/liboqs-config.yaml"
if [[ -f "$config_file" ]]; then
    if python3 -c "import yaml; yaml.safe_load(open('$config_file'))" 2>/dev/null; then
        success "Configuration file is valid YAML"
    else
        error "Configuration file is invalid YAML"
        exit 1
    fi
else
    error "Configuration file not found"
    exit 1
fi

# Final summary
log ""
log "======================================"
log "Test Summary"
log "======================================"
success "All Phase 1 tests passed successfully!"
log "System is ready for Phase 2 development"
log ""
log "Next steps:"
log "1. Proceed with strongSwan integration (Phase 2)"
log "2. Review logs in $LOG_DIR"
log "3. Run individual tests as needed"
log ""
log "Full test log saved to: $SUMMARY_LOG"
log "======================================"
