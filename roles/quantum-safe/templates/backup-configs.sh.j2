#!/bin/bash
# Backup Configuration Script for Quantum-Safe Algo VPN
# Generated by Algo VPN quantum-safe role
# Timestamp: {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
BACKUP_DIR="/opt/quantum-safe/backups"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_PREFIX="algo-configs-${TIMESTAMP}"
LOG_FILE="/opt/quantum-safe/logs/backup-${TIMESTAMP}.log"

# Create backup directory
mkdir -p "$BACKUP_DIR"

echo "=== Algo VPN Configuration Backup ===" | tee "$LOG_FILE"
echo "Timestamp: $(date)" | tee -a "$LOG_FILE"
echo "Backup Directory: $BACKUP_DIR" | tee -a "$LOG_FILE"
echo "" | tee -a "$LOG_FILE"

# Function to backup file with logging
backup_file() {
    local src="$1"
    local desc="$2"

    if [ -f "$src" ]; then
        cp "$src" "${BACKUP_DIR}/${BACKUP_PREFIX}-$(basename "$src")"
        echo "✓ Backed up $desc: $src" | tee -a "$LOG_FILE"
    else
        echo "⚠ File not found: $src ($desc)" | tee -a "$LOG_FILE"
    fi
}

# Function to backup directory with logging
backup_directory() {
    local src="$1"
    local desc="$2"
    local dest_name="$3"

    if [ -d "$src" ]; then
        cp -r "$src" "${BACKUP_DIR}/${BACKUP_PREFIX}-${dest_name}"
        echo "✓ Backed up $desc: $src" | tee -a "$LOG_FILE"
    else
        echo "⚠ Directory not found: $src ($desc)" | tee -a "$LOG_FILE"
    fi
}

echo "Backing up classical VPN configurations..." | tee -a "$LOG_FILE"

# strongSwan configurations
backup_file "/etc/ipsec.conf" "strongSwan IPsec configuration"
backup_file "/etc/ipsec.secrets" "strongSwan IPsec secrets"
backup_file "/etc/strongswan.conf" "strongSwan daemon configuration"
backup_directory "/etc/swanctl" "strongSwan swanctl directory" "swanctl"

# WireGuard configurations
backup_file "/etc/wireguard/wg0.conf" "WireGuard server configuration"
backup_directory "/etc/wireguard" "WireGuard configuration directory" "wireguard"

# System configurations
backup_file "/etc/systemd/resolved.conf" "systemd-resolved configuration"
backup_file "/etc/iptables/rules.v4" "IPv4 iptables rules"
backup_file "/etc/iptables/rules.v6" "IPv6 iptables rules"

# DNS configurations
backup_file "/etc/dnscrypt-proxy/dnscrypt-proxy.toml" "DNSCrypt-proxy configuration"

# SSH configurations
backup_file "/etc/ssh/sshd_config" "SSH daemon configuration"

# Network configurations
backup_directory "/etc/systemd/network" "systemd network configurations" "systemd-network"

# Service configurations
backup_directory "/etc/systemd/system" "systemd service overrides" "systemd-services"

# Client configurations (if they exist)
if [ -d "/configs" ]; then
    backup_directory "/configs" "Client configuration directory" "client-configs"
fi

# Current quantum-safe configurations
echo "" | tee -a "$LOG_FILE"
echo "Backing up current quantum-safe configurations..." | tee -a "$LOG_FILE"

backup_directory "/opt/quantum-safe" "Quantum-safe configuration directory" "quantum-safe"
backup_file "{{ strongswan_install_dir }}/etc/strongswan.conf" "Custom strongSwan configuration"
backup_file "{{ strongswan_install_dir }}/etc/ipsec.conf" "Custom IPsec configuration"

# System information
echo "" | tee -a "$LOG_FILE"
echo "Collecting system information..." | tee -a "$LOG_FILE"

{
    echo "=== System Information ==="
    echo "Hostname: $(hostname)"
    echo "OS: $(lsb_release -d 2>/dev/null || cat /etc/os-release | grep PRETTY_NAME)"
    echo "Kernel: $(uname -r)"
    echo "Date: $(date)"
    echo ""

    echo "=== Network Configuration ==="
    ip addr show
    echo ""

    echo "=== Active Services ==="
    systemctl list-units --type=service --state=active | grep -E "(strongswan|wireguard|ipsec)"
    echo ""

    echo "=== strongSwan Version ==="
    if [ -x "{{ strongswan_install_dir }}/sbin/ipsec" ]; then
        "{{ strongswan_install_dir }}/sbin/ipsec" version
    else
        ipsec version 2>/dev/null || echo "strongSwan not found"
    fi
    echo ""

    echo "=== WireGuard Version ==="
    wg --version 2>/dev/null || echo "WireGuard not found"
    echo ""

    echo "=== LibOQS Information ==="
    if [ -f "/usr/local/lib/liboqs.so" ]; then
        echo "LibOQS library: /usr/local/lib/liboqs.so"
        ls -la /usr/local/lib/liboqs.so
        strings /usr/local/lib/liboqs.so | grep -E "^[0-9]+\.[0-9]+\.[0-9]+" | head -1 || echo "Version not found"
    else
        echo "LibOQS library not found"
    fi

} > "${BACKUP_DIR}/${BACKUP_PREFIX}-system-info.txt"

echo "✓ System information collected" | tee -a "$LOG_FILE"

# Create tarball of all backups
echo "" | tee -a "$LOG_FILE"
echo "Creating backup archive..." | tee -a "$LOG_FILE"

cd "$BACKUP_DIR"
tar -czf "${BACKUP_PREFIX}.tar.gz" ${BACKUP_PREFIX}-*
rm -rf ${BACKUP_PREFIX}-*

echo "✓ Backup archive created: ${BACKUP_DIR}/${BACKUP_PREFIX}.tar.gz" | tee -a "$LOG_FILE"

# Cleanup old backups (keep last 5)
echo "" | tee -a "$LOG_FILE"
echo "Cleaning up old backups..." | tee -a "$LOG_FILE"

ls -t "${BACKUP_DIR}"/algo-configs-*.tar.gz | tail -n +6 | xargs -r rm -f
echo "✓ Old backups cleaned up (kept 5 most recent)" | tee -a "$LOG_FILE"

# Final summary
echo "" | tee -a "$LOG_FILE"
echo "=== Backup Complete ===" | tee -a "$LOG_FILE"
echo "Archive: ${BACKUP_DIR}/${BACKUP_PREFIX}.tar.gz" | tee -a "$LOG_FILE"
echo "Log: $LOG_FILE" | tee -a "$LOG_FILE"
echo "Size: $(du -h "${BACKUP_DIR}/${BACKUP_PREFIX}.tar.gz" | cut -f1)" | tee -a "$LOG_FILE"

exit 0
