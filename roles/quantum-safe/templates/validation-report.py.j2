#!/usr/bin/env python3
"""
Quantum-Safe Cryptography Validation Report Generator
Generated by Algo VPN quantum-safe role
"""

import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path

class QuantumSafeValidator:
    def __init__(self):
        self.strongswan_bin = "{{ strongswan_install_dir }}/sbin"
        self.liboqs_lib = "/usr/local/lib/liboqs.so"
        self.results = {
            "timestamp": datetime.now().isoformat(),
            "version": "{{ liboqs_version }}",
            "tests": []
        }

    def run_command(self, cmd, shell=False):
        """Execute a command and return result"""
        try:
            if isinstance(cmd, str) and not shell:
                cmd = cmd.split()
            result = subprocess.run(cmd, capture_output=True, text=True, shell=shell, timeout=30)
            return {
                "success": result.returncode == 0,
                "stdout": result.stdout,
                "stderr": result.stderr,
                "returncode": result.returncode
            }
        except subprocess.TimeoutExpired:
            return {
                "success": False,
                "stdout": "",
                "stderr": "Command timed out",
                "returncode": -1
            }
        except Exception as e:
            return {
                "success": False,
                "stdout": "",
                "stderr": str(e),
                "returncode": -1
            }

    def test_liboqs_installation(self):
        """Test LibOQS library installation"""
        test_result = {
            "name": "LibOQS Installation",
            "description": "Check if LibOQS library is properly installed",
            "status": "PASS",
            "details": []
        }

        # Check library file
        if Path(self.liboqs_lib).exists():
            test_result["details"].append("✓ LibOQS shared library found")

            # Test library loading with Python ctypes
            python_test = self.run_command([
                "python3", "-c",
                f"import ctypes; lib = ctypes.CDLL('{self.liboqs_lib}'); print('Library loaded successfully')"
            ])

            if python_test["success"]:
                test_result["details"].append("✓ LibOQS library loads successfully")
            else:
                test_result["status"] = "FAIL"
                test_result["details"].append(f"✗ LibOQS library load failed: {python_test['stderr']}")
        else:
            test_result["status"] = "FAIL"
            test_result["details"].append("✗ LibOQS shared library not found")

        self.results["tests"].append(test_result)

    def test_strongswan_installation(self):
        """Test strongSwan installation"""
        test_result = {
            "name": "strongSwan Installation",
            "description": "Check if strongSwan is properly installed with quantum-safe support",
            "status": "PASS",
            "details": []
        }

        ipsec_binary = Path(self.strongswan_bin) / "ipsec"

        if ipsec_binary.exists():
            test_result["details"].append("✓ strongSwan ipsec binary found")

            # Get version information
            version_result = self.run_command([str(ipsec_binary), "version"])
            if version_result["success"]:
                version_info = version_result["stdout"].strip()
                test_result["details"].append(f"✓ strongSwan version: {version_info}")
            else:
                test_result["details"].append("⚠ Could not retrieve strongSwan version")
        else:
            test_result["status"] = "FAIL"
            test_result["details"].append("✗ strongSwan ipsec binary not found")

        self.results["tests"].append(test_result)

    def test_quantum_safe_algorithms(self):
        """Test availability of quantum-safe algorithms"""
        test_result = {
            "name": "Quantum-Safe Algorithms",
            "description": "Check availability of ML-KEM algorithms",
            "status": "PASS",
            "details": []
        }

        swanctl_binary = Path(self.strongswan_bin) / "swanctl"

        if swanctl_binary.exists():
            # List available algorithms
            alg_result = self.run_command([str(swanctl_binary), "--list-algs"])
            if alg_result["success"]:
                algorithms = alg_result["stdout"]

                # Check for ML-KEM algorithms
                ml_kem_algorithms = ["ML-KEM-512", "ML-KEM-768", "ML-KEM-1024", "mlkem512", "mlkem768", "mlkem1024"]
                found_algorithms = []

                for alg in ml_kem_algorithms:
                    if alg.lower() in algorithms.lower():
                        found_algorithms.append(alg)

                if found_algorithms:
                    test_result["details"].append(f"✓ Found quantum-safe algorithms: {', '.join(found_algorithms)}")
                else:
                    test_result["status"] = "WARN"
                    test_result["details"].append("⚠ No ML-KEM algorithms detected")

                test_result["details"].append("Available algorithms:")
                for line in algorithms.split('\n')[:10]:  # Show first 10 lines
                    if line.strip():
                        test_result["details"].append(f"  {line.strip()}")
            else:
                test_result["status"] = "FAIL"
                test_result["details"].append("✗ Could not list algorithms")
        else:
            test_result["status"] = "FAIL"
            test_result["details"].append("✗ swanctl binary not found")

        self.results["tests"].append(test_result)

    def test_service_status(self):
        """Test strongSwan service status"""
        test_result = {
            "name": "strongSwan Service",
            "description": "Check strongSwan systemd service status",
            "status": "PASS",
            "details": []
        }

        # Check if service is enabled
        enabled_result = self.run_command(["systemctl", "is-enabled", "strongswan"])
        if enabled_result["success"]:
            test_result["details"].append("✓ strongSwan service is enabled")
        else:
            test_result["status"] = "WARN"
            test_result["details"].append("⚠ strongSwan service is not enabled")

        # Check if service is active
        active_result = self.run_command(["systemctl", "is-active", "strongswan"])
        if active_result["success"]:
            test_result["details"].append("✓ strongSwan service is active")
        else:
            test_result["status"] = "WARN"
            test_result["details"].append("⚠ strongSwan service is not active")

        self.results["tests"].append(test_result)

    def generate_report(self):
        """Generate validation report"""
        self.test_liboqs_installation()
        self.test_strongswan_installation()
        self.test_quantum_safe_algorithms()
        self.test_service_status()

        # Calculate overall status
        statuses = [test["status"] for test in self.results["tests"]]
        if "FAIL" in statuses:
            overall_status = "FAIL"
        elif "WARN" in statuses:
            overall_status = "WARN"
        else:
            overall_status = "PASS"

        self.results["overall_status"] = overall_status

        return self.results

    def print_report(self):
        """Print human-readable report"""
        report = self.generate_report()

        print("=" * 60)
        print("QUANTUM-SAFE CRYPTOGRAPHY VALIDATION REPORT")
        print("=" * 60)
        print(f"Timestamp: {report['timestamp']}")
        print(f"LibOQS Version: {report['version']}")
        print(f"Overall Status: {report['overall_status']}")
        print()

        for test in report["tests"]:
            print(f"Test: {test['name']} - {test['status']}")
            print(f"Description: {test['description']}")
            for detail in test["details"]:
                print(f"  {detail}")
            print()

        print("=" * 60)

    def save_json_report(self, filename="/opt/quantum-safe/validation-report.json"):
        """Save JSON report to file"""
        report = self.generate_report()

        try:
            with open(filename, 'w') as f:
                json.dump(report, f, indent=2)
            print(f"JSON report saved to: {filename}")
        except Exception as e:
            print(f"Failed to save JSON report: {e}")

def main():
    validator = QuantumSafeValidator()

    if len(sys.argv) > 1 and sys.argv[1] == "--json":
        # JSON output mode
        report = validator.generate_report()
        print(json.dumps(report, indent=2))
    else:
        # Human-readable output mode
        validator.print_report()
        validator.save_json_report()

if __name__ == "__main__":
    main()
